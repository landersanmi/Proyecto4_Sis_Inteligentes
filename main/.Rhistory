############################### GENERATE HTML REPORT #############################
library(rmarkdown)
render("decision-tree-divorce.Rmd", output_file = "Divorce_Report_AmaIA")
# Clear plots
if(!is.null(dev.list())) dev.off()
# Clear console
cat("\014")
# Clean workspace
rm(list=ls())
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Install required packages
library(lattice)
library(ggplot2)
library(caret)
library(rpart)
library(rpart.plot)
# Read data from CSV
filename = "../data/divorce.csv"
data <- read.csv(file = filename, sep =";", header = TRUE)
############################### GENERATE HTML REPORT #############################
library(rmarkdown)
render("decision-tree-divorce.Rmd", output_file = "Divorce_Report_AmaIA")
# Clear plots
if(!is.null(dev.list())) dev.off()
# Clear console
cat("\014")
# Clean workspace
rm(list=ls())
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Install required packages
library(ggplot2)
library(lattice)
library(caret)
library(RKEEL)
# Read data from CSV
data <- read.csv("../data/loiu.csv")
############################### GENERATE HTML REPORT #############################
library(rmarkdown)
render("linear-regression-loiuTemperature_AmaIA.Rmd", output_file = "Loiu_Report_AmaIA")
# Remove non-numerical columns of the data
data$fecha = NULL
data$indicativo = NULL
data$nombre = NULL
data$provincia = NULL
data$altitud = NULL
data$horatmin = NULL
data$horatmax = NULL
data$horaracha = NULL
data$horaPresMax = NULL
data$horaPresMin = NULL
nrow(data)
data <- na.omit(data)
nrow(data)
#Save actual values
max <- data$tmax
min <- data$tmin
med <- data$tmed
# Percentage of training examples
training_p <- 0.80
scores_tmed <- c()
scores_tmax <- c()
scores_tmin <- c()
# Generate data partition 80% training / 20% test. The result is a vector with the indexes
# of the examples that will be used for the training of the model.
training_indexes_tmed <- createDataPartition(y = data$tmed, p = training_p, list = FALSE)
# Split training and test data
training_data_tmed <- data[training_indexes_tmed, ] # Extract training data using training_indexes
test_data_tmed    <- data[-training_indexes_tmed, ] # Extract data with the indexes not included in training_indexes
# Create Linear Model using training data. Formula = all the columns except Salary
model_tmed <- lm(formula = tmed ~., data = training_data_tmed)
# Make the prediction using the model and test data
prediction_tmed <- predict(model_tmed, test_data_tmed)
# Calculate Mean Average Error
mean_avg_error_tmed <- mean(abs(prediction_tmed - test_data_tmed$tmed))
scores_tmed <- c(scores_tmed, mean_avg_error_tmed)
# Print Mean Absolute Error
print(paste0("- Mean average error Tiempo Medio: ", mean_avg_error_tmed))
# Print model summary
summary(model_tmed)
# Plot model
par(mfrow = c(2,2))
plot(model_tmed)
################################################################################
#                               PREDICT TIEMPO MED                             #
################################################################################
data$tmax = NULL
data$tmin = NULL
for (i in 1:10) {
# Generate data partition 80% training / 20% test. The result is a vector with the indexes
# of the examples that will be used for the training of the model.
training_indexes_tmed <- createDataPartition(y = data$tmed, p = training_p, list = FALSE)
# Split training and test data
training_data_tmed <- data[training_indexes_tmed, ] # Extract training data using training_indexes
test_data_tmed    <- data[-training_indexes_tmed, ] # Extract data with the indexes not included in training_indexes
# Create Linear Model using training data. Formula = all the columns except Salary
model_tmed <- lm(formula = tmed ~., data = training_data_tmed)
# Make the prediction using the model and test data
prediction_tmed <- predict(model_tmed, test_data_tmed)
# Calculate Mean Average Error
mean_avg_error_tmed <- mean(abs(prediction_tmed - test_data_tmed$tmed))
scores_tmed <- c(scores_tmed, mean_avg_error_tmed)
# Print Mean Absolute Error
print(paste0("- Mean average error Tiempo Medio: ", mean_avg_error_tmed))
# Print model summary
summary(model_tmed)
# Plot model
par(mfrow = c(2,2))
plot(model_tmed)
}
print(paste0("Error Medio de los 10 modelos para Temp. media: ", mean(scores_tmed)))
print(paste0("Desviacion estandar de los 10 modelos para Temp. media: ", sd(scores_tmed)))
################################################################################
#                               PREDICT TIEMPO MAX                             #
################################################################################
data$tmax = max
data$tmin = NULL
data$tmed = NULL
for (i in 1:10) {
training_indexes_tmax <- createDataPartition(y = data$tmax, p = training_p, list = FALSE)
training_data_tmax <- data[training_indexes_tmax, ]
test_data_tmax     <- data[-training_indexes_tmax, ]
model_tmax <- lm(formula = tmax ~., data = training_data_tmax)
prediction_tmax <- predict(model_tmax, test_data_tmax)
mean_avg_error_tmax <- mean(abs(prediction_tmax - test_data_tmax$tmax))
scores_tmax <- c(scores_tmax, mean_avg_error_tmax)
print(paste0("- Mean average error Tiempo Maximo: ", mean_avg_error_tmax))
summary(model_tmax)
par(mfrow = c(2,2))
plot(model_tmax)
}
print(paste0("Error Medio de los 10 modelos para Temp. maxima: ", mean(scores_tmax)))
print(paste0("Desviacion estandar de los 10 modelos para Temp. maxima: ", sd(scores_tmax)))
################################################################################
#                               PREDICT TIEMPO MIN                             #
################################################################################
data$tmin = min
data$tmax = NULL
data$tmed = NULL
for (i in 1:10) {
training_indexes_tmin <- createDataPartition(y = data$tmin, p = training_p, list = FALSE)
training_data_tmin <- data[training_indexes_tmin, ]
test_data_tmin     <- data[-training_indexes_tmin, ]
model_tmin <- lm(formula = tmin ~., data = training_data_tmin)
prediction_tmin <- predict(model_tmin, test_data_tmin)
mean_avg_error_tmin <- mean(abs(prediction_tmin - test_data_tmin$tmin))
scores_tmin <- c(scores_tmin, mean_avg_error_tmin)
print(paste0("- Mean average error Tiempo Minimo: ", mean_avg_error_tmin))
summary(model_tmin)
par(mfrow = c(2,2))
plot(model_tmin)
}
print(paste0("Error Medio de los 10 modelos para Temp. minima: ", mean(scores_tmin)))
print(paste0("Desviacion estandar de los 10 modelos para Temp. minima: ", sd(scores_tmin)))
############################### GENERATE HTML REPORT #############################
library(rmarkdown)
render("linear-regression-loiuTemperature_AmaIA.Rmd", output_file = "Loiu_Report_AmaIA")
